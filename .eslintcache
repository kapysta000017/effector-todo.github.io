[{"C:\\code\\effector-todo\\src\\index.js":"1","C:\\code\\effector-todo\\src\\App.js":"2","C:\\code\\effector-todo\\src\\components\\Page\\index.js":"3","C:\\code\\effector-todo\\src\\components\\Page\\Page.jsx":"4","C:\\code\\effector-todo\\src\\components\\Page\\modelLists.js":"5","C:\\code\\effector-todo\\src\\components\\Page\\modelTasks.js":"6","C:\\code\\effector-todo\\src\\components\\ui\\InputTodo.jsx":"7","C:\\code\\effector-todo\\src\\components\\ui\\AddItem.jsx":"8"},{"size":158,"mtime":1650558926852,"results":"9","hashOfConfig":"10"},{"size":197,"mtime":1650558926844,"results":"11","hashOfConfig":"10"},{"size":29,"mtime":1650558926848,"results":"12","hashOfConfig":"10"},{"size":5951,"mtime":1650558926847,"results":"13","hashOfConfig":"10"},{"size":2493,"mtime":1650558926848,"results":"14","hashOfConfig":"10"},{"size":1935,"mtime":1650558926849,"results":"15","hashOfConfig":"10"},{"size":1617,"mtime":1650558926851,"results":"16","hashOfConfig":"10"},{"size":1503,"mtime":1650558926850,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1un1qcy",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\code\\effector-todo\\src\\index.js",[],["36","37"],"C:\\code\\effector-todo\\src\\App.js",[],"C:\\code\\effector-todo\\src\\components\\Page\\index.js",[],"C:\\code\\effector-todo\\src\\components\\Page\\Page.jsx",[],"C:\\code\\effector-todo\\src\\components\\Page\\modelLists.js",["38"],"import { createStore, createEffect, sample, createEvent, guard } from 'effector'\r\nimport { createGate } from 'effector-react'\r\nimport axios from 'axios'\r\n\r\nexport const GateLists = createGate()\r\nexport const fetchLists = createEffect(async () => await axios.get('https://6047f10db801a40017ccd2ba.mockapi.io/lists'))\r\nconst fetchColors = createEffect(async () => await axios.get('https://6047f10db801a40017ccd2ba.mockapi.io/colors'))\r\n\r\nsample({\r\n  clock: GateLists.open,\r\n  target: [fetchLists, fetchColors]\r\n})\r\nexport const $lists = createStore([]).on(fetchLists.doneData, (_, { data }) => data)\r\nexport const $error = createStore(null).on(fetchLists.failData, (_, { response }) => response.status)\r\nexport const $colors = createStore([]).on(fetchColors.doneData, (_, { data }) => data)\r\n\r\nexport const changeInputList = createEvent()\r\nexport const fetchAddTodo = createEffect(async (params) => await axios.post('https://6047f10db801a40017ccd2ba.mockapi.io/lists', params))\r\nexport const $inputValue = createStore('').on(changeInputList, (_, value) => value).reset(fetchAddTodo)\r\nexport const onSelectColor = createEvent()\r\nconst $color = createStore(null).on(onSelectColor, (_, color) => color)\r\nexport const onAddTodo = createEvent()\r\n\r\nexport const fetchRemoveList = createEffect(async (id) => {\r\n  const { data } = await axios.get(`https://6047f10db801a40017ccd2ba.mockapi.io/lists/${id}/items`)\r\n  await data.forEach(element => axios.delete(`https://6047f10db801a40017ccd2ba.mockapi.io/lists/${id}/items/${element.id}`))\r\n  return await axios.delete(`https://6047f10db801a40017ccd2ba.mockapi.io/lists/${id}`)\r\n})\r\nconst removeList = fetchRemoveList.map((id) => id)\r\n\r\n\r\nsample({\r\n  clock: onAddTodo,\r\n  source: $color,\r\n  fn: (color, todo) => ({ title: todo, color: color }),\r\n  target: fetchAddTodo\r\n})\r\n\r\nsample({\r\n  clock: fetchAddTodo.doneData,\r\n  source: $lists,\r\n  fn: (state, { data }) => [...state, data],\r\n  target: $lists\r\n})\r\n\r\nsample({\r\n  clock: removeList,\r\n  source: $lists,\r\n  fn: (lists, id) => lists.filter(list => list.id !== id),\r\n  target: $lists\r\n})\r\n\r\n\r\nexport const fetchRenameTitle = createEffect(async (params) => await axios.put(`https://6047f10db801a40017ccd2ba.mockapi.io/lists/${params.id}`, { ...params }))\r\nconst renameTitle = fetchRenameTitle.map(params => params)\r\nsample({\r\n  clock: renameTitle,\r\n  source: $lists,\r\n  fn: (lists, newTitle) => lists.map(list => list.id === newTitle.id ? { ...list, title: newTitle.title } : list),\r\n  target: $lists\r\n})","C:\\code\\effector-todo\\src\\components\\Page\\modelTasks.js",[],"C:\\code\\effector-todo\\src\\components\\ui\\InputTodo.jsx",[],"C:\\code\\effector-todo\\src\\components\\ui\\AddItem.jsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":58,"nodeType":"45","messageId":"46","endLine":1,"endColumn":63},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'guard' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]